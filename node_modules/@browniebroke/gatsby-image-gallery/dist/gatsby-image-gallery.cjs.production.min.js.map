{"version":3,"file":"gatsby-image-gallery.cjs.production.min.js","sources":["../src/row.tsx","../src/column.tsx","../src/img-wrapper.tsx","../src/index.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nconst Row = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px;\n`\nexport default Row\n","import styled, { css } from 'styled-components'\n\ninterface ColProps {\n  md: number\n  width: number\n}\n\nconst Col = styled.div<ColProps>`\n  flex-grow: 0;\n  flex-shrink: 0;\n  ${(props) => {\n    return css`\n      flex-basis: ${props.width}%;\n      max-width: ${props.width}%;\n    `\n  }}\n\n  @media (min-width: 576px) {\n    ${(props) => {\n      return css`\n        flex-basis: ${props.md}%;\n        max-width: ${props.md}%;\n      `\n    }}\n  }\n`\n\nexport default Col\n","import styled from 'styled-components'\n\ninterface ImgWrapper {\n  margin: string\n}\n\nconst ImgWrapper = styled.div<ImgWrapper>`\n  margin: ${(props) => props.margin};\n`\n\nexport default ImgWrapper\n","import React, { FC, useState } from 'react'\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport Lightbox from 'react-image-lightbox'\n\nimport Row from './row'\nimport Col from './column'\nimport ImgWrapper from './img-wrapper'\nimport styled from 'styled-components'\n\nimport LightboxCSS from 'react-image-lightbox/style.css'\n\ninterface ImageProp {\n  full: IGatsbyImageData\n  thumb: IGatsbyImageData\n  thumbAlt?: string\n  title?: string\n  caption?: string\n}\n\ninterface GalleryProps {\n  images: ImageProp[]\n  colWidth?: number\n  mdColWidth?: number\n  gutter?: string\n  imgClass?: string\n  lightboxOptions?: object\n  onClose?: () => void\n}\n\nconst StyledLightbox = styled(Lightbox)`\n  ${LightboxCSS}\n`\n\nconst Gallery: FC<GalleryProps> = ({\n  images = [],\n  colWidth = 100 / 3,\n  mdColWidth = 100 / 4,\n  gutter = '0.25rem',\n  imgClass = '',\n  lightboxOptions = {},\n  onClose = () => {},\n}) => {\n  const [index, setIndex] = useState(0)\n  const [isOpen, setIsOpen] = useState(false)\n\n  const prevIndex = (index + images.length - 1) % images.length\n  const nextIndex = (index + images.length + 1) % images.length\n\n  // URLs for full width images\n  const mainSrc = images[index]?.full?.images?.fallback?.src\n  const nextSrc = images[nextIndex]?.full?.images?.fallback?.src\n  const prevSrc = images[prevIndex]?.full?.images?.fallback?.src\n\n  const onCloseLightbox = () => {\n    onClose()\n    setIsOpen(false)\n  }\n\n  return (\n    <React.Fragment>\n      <Row>\n        {images.map((img, imgIndex) => {\n          const thumbImage = getImage(img.thumb)\n          if (!thumbImage) {\n            return null\n          }\n          return (\n            <Col\n              width={colWidth}\n              md={mdColWidth}\n              key={imgIndex}\n              onClick={() => {\n                setIsOpen(true)\n                setIndex(imgIndex)\n              }}\n            >\n              <ImgWrapper margin={gutter}>\n                <GatsbyImage\n                  image={thumbImage}\n                  className={imgClass}\n                  alt={img.thumbAlt || ''}\n                />\n              </ImgWrapper>\n            </Col>\n          )\n        })}\n      </Row>\n      {isOpen && (\n        <StyledLightbox\n          mainSrc={mainSrc || ''}\n          nextSrc={nextSrc || ''}\n          prevSrc={prevSrc || ''}\n          onCloseRequest={onCloseLightbox}\n          onMovePrevRequest={() => setIndex(prevIndex)}\n          onMoveNextRequest={() => setIndex(nextIndex)}\n          imageTitle={images[index].title}\n          imageCaption={images[index].caption}\n          {...lightboxOptions}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default Gallery\n"],"names":["Row","styled","div","Col","props","css","width","md","ImgWrapper","margin","StyledLightbox","Lightbox","LightboxCSS","images","colWidth","mdColWidth","gutter","imgClass","lightboxOptions","onClose","useState","index","setIndex","isOpen","setIsOpen","prevIndex","length","nextIndex","mainSrc","_images$index","full","_images$index$full","_images$index$full$im","fallback","_images$index$full$im2","src","nextSrc","_images$nextIndex","_images$nextIndex$ful","_images$nextIndex$ful2","_images$nextIndex$ful3","prevSrc","_images$prevIndex","_images$prevIndex$ful","_images$prevIndex$ful2","_images$prevIndex$ful3","React","Fragment","map","img","imgIndex","thumbImage","getImage","thumb","key","onClick","GatsbyImage","image","className","alt","thumbAlt","onCloseRequest","onMovePrevRequest","onMoveNextRequest","imageTitle","title","imageCaption","caption"],"mappings":"wXAEA,cAAMA,EAAMC,EAAOC,2GCKbC,EAAMF,EAAOC,gHAGf,SAACE,UACMC,4EACSD,EAAME,MACPF,EAAME,UAKnB,SAACF,UACMC,kFACSD,EAAMG,GACPH,EAAMG,OCfrBC,EAAaP,EAAOC,sCACd,SAACE,UAAUA,EAAMK,UCsBvBC,EAAiBT,EAAOU,EAAPV,yBACnBW,mBAG8B,4CAChCC,OAAAA,aAAS,SACTC,SAAAA,aAAW,IAAM,QACjBC,WAAAA,aAAa,SACbC,OAAAA,aAAS,gBACTC,SAAAA,aAAW,SACXC,gBAAAA,aAAkB,SAClBC,QAAAA,aAAU,iBAEgBC,WAAS,GAA5BC,OAAOC,SACcF,YAAS,GAA9BG,OAAQC,OAETC,GAAaJ,EAAQR,EAAOa,OAAS,GAAKb,EAAOa,OACjDC,GAAaN,EAAQR,EAAOa,OAAS,GAAKb,EAAOa,OAGjDE,WAAUf,EAAOQ,cAAPQ,EAAeC,gBAAfC,EAAqBlB,kBAArBmB,EAA6BC,iBAA7BC,EAAuCC,IACjDC,WAAUvB,EAAOc,cAAPU,EAAmBP,gBAAnBQ,EAAyBzB,kBAAzB0B,EAAiCN,iBAAjCO,EAA2CL,IACrDM,WAAU5B,EAAOY,cAAPiB,EAAmBZ,gBAAnBa,EAAyB9B,kBAAzB+B,EAAiCX,iBAAjCY,EAA2CV,WAQzDW,gBAACA,EAAMC,cACLD,gBAAC9C,OACEa,EAAOmC,KAAI,SAACC,EAAKC,OACVC,EAAaC,WAASH,EAAII,cAC3BF,EAIHL,gBAAC3C,GACCG,MAAOQ,EACPP,GAAIQ,EACJuC,IAAKJ,EACLK,QAAS,WACP/B,GAAU,GACVF,EAAS4B,KAGXJ,gBAACtC,GAAWC,OAAQO,GAClB8B,gBAACU,eACCC,MAAON,EACPO,UAAWzC,EACX0C,IAAKV,EAAIW,UAAY,OAhBpB,SAuBZrC,GACCuB,gBAACpC,iBACCkB,QAASA,GAAW,GACpBQ,QAASA,GAAW,GACpBK,QAASA,GAAW,GACpBoB,eAvCgB,WACtB1C,IACAK,GAAU,IAsCJsC,kBAAmB,kBAAMxC,EAASG,IAClCsC,kBAAmB,kBAAMzC,EAASK,IAClCqC,WAAYnD,EAAOQ,GAAO4C,MAC1BC,aAAcrD,EAAOQ,GAAO8C,SACxBjD"}